@use 'sass:color';

$bar-spacing: $spacing * .3;
$button-radius: $radius;

@mixin panel-button($flat: true, $reactive: true) {
    @include accs-button($flat, $reactive);

    >* {
        border-radius: $button-radius;
        margin: $bar-spacing;
        padding: $padding * 0.4 $padding * 0.8;
        background: $surfaceContainer;
        margin-bottom: 0;
    }

    label,
    image {
        font-weight: bold;
    }
}

.bar {

    .panel-button {
        @include panel-button;


        &:not(.flat) {

            @include accs-button($flat: false);
        }
    }
    
    .date {
        font-size: 14px;
        border-radius: 5px;
    }

    .workspaces {

        button {
            min-width: 0;
            padding-top: 0;
            padding-bottom: 0;
        }

        label {
            font-size: 12;
            min-width: 12pt;
            min-height: 8pt;
            border-radius: $radius*.6;
            margin: 0 $padding * .5;
            transition: $transition* .5;

            &.active {
                background-color: $secondaryContainer;
                min-width: 20pt;
                min-height: 8pt;
            }
        }
    }

    .media label {
        margin: 0 ($spacing * .5)
    }

    .taskbar .indicator.active {
        background-color: $primary;
        border-radius: $radius;
        min-height: 4pt;
        min-width: 6pt;
        margin: 2pt;
    }

    .powermenu.colored,
    .recorder {
        font-size: 12px;
        
        image {
            color: transparentize($error, 0.3);
            
        }

        &:hover image {
            color: transparentize($error, 0.15);
        }

        &:active image {
            color: $onPrimary;
        }
    }

    .quicksettings>box>box {
        @include spacing($spacing: if($bar-spacing==0, $padding / 2, $bar-spacing));
    }

    .quicksettings:not(.active):not(:active) {
        .bluetooth {
            color: $primary;

            label {
                font-size: $font-size * .7;
                color: $foreground;
                text-shadow: $shadow;
            }
        }
    }

    .battery-bar {
        >* {
            padding: 0;
        }

        &.bar-hidden>box {
            padding: 0 $spacing * .5;

            image {
                margin: 0;
            }
        }

        levelbar * {
            all: unset;
            transition: $transition;
        }

        .whole {
            @if $shadows {
                image {
                    -gtk-icon-shadow: $shadow;
                }

                label {
                    text-shadow: $shadow;
                }
            }
        }

        .regular image {
            margin-left: $spacing * .5;
        }

        trough {
            @include widget;
            min-height: 12pt;
            min-width: 12pt;
        }

        .regular trough {
            margin-right: $spacing * .5;
        }

        block {
            margin: 0;

            &:last-child {
                border-radius: 0 $button-radius $button-radius 0;
            }

            &:first-child {
                border-radius: $button-radius 0 0 $button-radius;
            }
        }

        .vertical {
            block {
                &:last-child {
                    border-radius: 0 0 $button-radius $button-radius;
                }

                &:first-child {
                    border-radius: $button-radius $button-radius 0 0;
                }
            }

        }

        @for $i from 1 through $bar-battery-blocks {
            block:nth-child(#{$i}).filled {
                background-color: color.mix($background, $background, $i*3)
            }

            &.low block:nth-child(#{$i}).filled {
                background-color: color.mix($background, $errorContainer, $i*3)
            }

            &.charging block:nth-child(#{$i}).filled {
                background-color: color.mix($background, $charging-bg, $i*3)
            }

            &:active .regular block:nth-child(#{$i}).filled {
                background-color: color.mix($background, $foreground, $i*3)
            }
        }

        &.low image {
            color: $error
        }

        &.charging image {
            color: $charging-bg
        }

        &:active image {
            color: $primary
        }
    }
}